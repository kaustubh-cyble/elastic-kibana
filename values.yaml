---
elasticsearchHosts: "https://elasticsearch-master.elastic:9200"

replicas: 2

# Extra environment variables to append to this nodeGroup
# This will be appended to the current 'env:' key. You can use any of the kubernetes env
# syntax here
extraEnvs:
  - name: "NODE_OPTIONS"
    value: "--max-old-space-size=1800"
  # - name: "ELASTICSEARCH_USERNAME"
  #   value: "admin"
    # valueFrom:
    #   secretKeyRef:
    #     name: elasticsearch-master-credentials
    #     key: username
  # - name: "ELASTICSEARCH_PASSWORD"
  #   value: "elastic"
  #   # valueFrom:
    #   secretKeyRef:
    #     name: elasticsearch-master-credentials
    #     key: password
  # - name: "SERVER_BASEPATH"
  #   value: "/elastickibana"
  # - name: "SERVER_REWRITEBASEPATH"
  #   value: "false"
  # - name: "SERVER_PUBLICBASEURL"
  #   value: "https://bifrost.tippee.co/elastickibana"
  # - name: "ELASTICSEARCH_SERVICEACCOUNTTOKEN"
  #   valueFrom:
  #     secretKeyRef:
  #       name: elastic-service-aws-token-pthsd
  #       key: token
#  - name: MY_ENVIRONMENT_VAR
#    value: the_value_goes_here

# Allows you to load environment variables from kubernetes secret or config map
envFrom: []
# - secretRef:
#     name: env-secret
# - configMapRef:
#     name: config-map

# A list of secrets and their paths to mount inside the pod
# This is useful for mounting certificates for security and for mounting
# the X-Pack license
secretMounts:
 - name: elastic-certificates
   secretName: elasticsearch-master-certs
   path: /usr/share/kibana/config/certs
   defaultMode: 0755
#  - name: kibana-keystore
#    secretName: kibana-keystore
#    path: /usr/share/kibana/data/kibana.keystore
#    subPath: kibana.keystore # optional

hostAliases: []
# - ip: "127.0.0.1"
#   hostnames:
#   - "elasticsearch-master.elastic"

image: "docker.elastic.co/kibana/kibana"
imageTag: "8.1.0"
imagePullPolicy: "IfNotPresent"

# additionals labels
labels: {}

annotations: {}

podAnnotations: {}
# iam.amazonaws.com/role: es-cluster

resources:
  requests:
    cpu: "1000m"
    memory: "2Gi"
  limits:
    cpu: "1000m"
    memory: "2Gi"

protocol: http

serverHost: "0.0.0.0"

healthCheckPath: "/app/kibana"

# Allows you to add any config files in /usr/share/kibana/config/
# such as kibana.yml
kibanaConfig:
  kibana.yml: |
    server.port: 5601
    server.host: "0.0.0.0"
    server.basePath: "/elastickibana"
    server.rewriteBasePath: true
    server.publicBaseUrl: "https://bifrost.tippee.co/elastickibana"
    server.name: "bifrost.tippee.co"
    server.ssl.enabled: false
    # server.ssl.key: /usr/share/kibana/config/certs/tls.key
    # server.ssl.certificate: /usr/share/kibana/config/certs/tls.crt
    # xpack.reporting.encryptionKey: "58fa5601475858d49731f836d2686eb9"
    # xpack.security.encryptionKey: "1cb3ccd534fc4391e94d7b0b57177129"
    elasticsearch.hosts: [ "https://elasticsearch-master.elastic:9200" ]
    # elasticsearch.serviceAccountToken: "AAEAAWVsYXN0aWMva2liYW5hL3Rva2VuNDpmRXF3NnJzVlFlLWJTVThTUUJTSDJ3"
    # xpack.reporting.roles.enabled: "false"
    elasticsearch.username: "kibana_system"
    elasticsearch.password: "elastic"
    elasticsearch.requestTimeout: 120000
    elasticsearch.pingTimeout: 120000
    elasticsearch.ssl.certificateAuthorities: [ "/usr/share/kibana/config/certs/ca.crt" ]
    elasticsearch.ssl.verificationMode: certificate
    elasticsearch.ssl.certificate: /usr/share/kibana/config/certs/tls.crt
    elasticsearch.ssl.key: /usr/share/kibana/config/certs/tls.key
#   kibana.yml: |
#     key:
#       nestedkey: value

# If Pod Security Policy in use it may be required to specify security context as well as service account

podSecurityContext:
  fsGroup: 1000

securityContext:
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: false
  runAsNonRoot: true
  runAsUser: 1000

serviceAccount: ""

# Whether or not to automount the service account token in the pod. Normally, Kibana does not need this
automountToken: false

# This is the PriorityClass settings as defined in
# https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/#priorityclass
priorityClassName: ""

httpPort: 5601

extraVolumes:
  []
  # - name: extras
  #   emptyDir: {}

extraVolumeMounts:
  []
  # - name: extras
  #   mountPath: /usr/share/extras
  #   readOnly: true
  #

extraContainers: []
# - name: dummy-init
#   image: busybox
#   command: ['echo', 'hey']

extraInitContainers: []
# - name: dummy-init
#   image: busybox
#   command: ['echo', 'hey']

updateStrategy:
  type: "Recreate"

service:
  type: ClusterIP
  loadBalancerIP: ""
  port: 5601
  nodePort: ""
  labels: {}
  annotations:
    konghq.com/protocol: http
  # cloud.google.com/load-balancer-type: "Internal"
  # service.beta.kubernetes.io/aws-load-balancer-internal: 0.0.0.0/0
  # service.beta.kubernetes.io/azure-load-balancer-internal: "true"
  # service.beta.kubernetes.io/openstack-internal-load-balancer: "true"
  # service.beta.kubernetes.io/cce-load-balancer-internal-vpc: "true"
  loadBalancerSourceRanges: []
  # 0.0.0.0/0
  httpPortName: http

ingress:
  enabled: true
  className: "kong"
  pathtype: ImplementationSpecific
  annotations:
    konghq.com/preserve-host: "true"
    konghq.com/protocols: https, http
    konghq.com/strip-path: "false"
    nlb.ingress.kubernetes.io/actions.ssl-redirect: "true"
  # kubernetes.io/ingress.class: nginx
  # kubernetes.io/tls-acme: "true"
  hosts:
    - host: bifrost.tippee.co
      paths:
        - path: /elastickibana
  tls:
   - secretName: w-tippee-co
     hosts:
       - bifrost.tippee.co

readinessProbe:
  enabled: false
  failureThreshold: 3
  initialDelaySeconds: 10
  periodSeconds: 10
  successThreshold: 3
  timeoutSeconds: 5

imagePullSecrets: []
nodeSelector: {}
tolerations:
  - key: dedicated
    operator: Equal
    effect: NoSchedule
    value: apps
affinity:
  nodeAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      nodeSelectorTerms:
        - matchExpressions:
            - key: purpose
              operator: In
              values:
                - apps

nameOverride: ""
fullnameOverride: ""

lifecycle: {}
# preStop:
#   exec:
#     command: ["/bin/sh", "-c", "echo Hello from the postStart handler > /usr/share/message"]
# postStart:
#   exec:
#     command: ["/bin/sh", "-c", "echo Hello from the postStart handler > /usr/share/message"]

# Deprecated - use only with versions < 6.6
elasticsearchURL: "https://elasticsearch-master.elastic:9200" # "http://elasticsearch-master:9200"